# -*- mode: ruby -*-
require 'rake/loaders/makefile'
require 'rbconfig'
Rake.application.add_loader('d', Rake::MakefileLoader.new)

CLEAN = Rake::FileList["**/*~", "**/*.bak", "**/core"]
CLEAN.clear_exclude.exclude { |fn|
  fn.pathmap("%f").downcase == 'core' && File.directory?(fn)
}

CLEAN.include('*.o')

if /darwin|mac os/ =~ RbConfig::CONFIG['host_os']
  CXX = "g++-4.9"
  CC = "gcc-4.9"
else
  CXX = "g++"
  CC = "gcc"
end



desc "Remove any temporary products."
task :clean do
  CLEAN.each do |fn|
    rm_rf fn
    if Rake::Task.task_defined?(fn)
      task = Rake::Task[fn]
      task.reenable
    end
  end
end

CLOBBER = Rake::FileList.new

desc "Remove any generated file."
task :clobber => [:clean] do
  CLOBBER.each { |fn| rm_r fn rescue nil }
end


class String
  def to_task
    Rake::Task[self]
  end
end

CLEAN.include('*.o')
CLEAN.include('*.d')
CLEAN.include('*.mf')

rule '.o' => '.cpp' do |t|
  sh "#{CXX}  #{CXXFLAGS} -MMD -c -o #{t.name} #{t.source}"
end

rule '.o' => '.c' do |t|
  sh "#{CC}  #{CFLAGS} -MMD -c -o #{t.name} #{t.source}"
end


rule '.d' => '.cpp' do |t|
  verbose(false) do 
    sh "#{CXX} -MM -MG -MF #{t.name} #{t.source}"
  end
end

rule '.d' => '.c' do |t|
  verbose(false) do 
    sh "#{CC} -MM -MG -MF #{t.name} #{t.source}"
  end
end

(FileList['*.c'] + FileList['*.cpp']).each do |source_file|
  dependency_file = source_file.pathmap("%X.d")
  dependency_file.to_task
  import dependency_file
end

COMMON_FLAGS=" -fPIC -O2 -Wcast-qual -Wpedantic -Wall -Wextra -Wuninitialized -Wno-unused-function -Wno-unused-but-set-variable -Wno-return-type -Werror"
CFLAGS="#{COMMON_FLAGS} -std=c11 -Wstrict-prototypes -Wc++-compat -Wshadow"
CXXFLAGS="#{COMMON_FLAGS} -std=gnu++11"


task "malloc.h" do end
  
task :default => "fastscaling"


%w{ test_program fastscaling libfastscaling.so }.each { |file| CLOBBER.include(file) if File.exists?(file) }


OBJECTS=%w{ libfastscaling.o bitmap_compositing.o bitmap_formats.o lookup_tables.o color_matrix.o unmanaged_renderer.o }
SO_FILE="libfastscaling.so"


TEST_PROGRAM = "test_program"


desc "build a fastscaling program"
file "fastscaling" => ['fastscaling.o', SO_FILE]  do |t|
  sh "#{CC} -o #{t.name} -Werror #{t.prerequisites.join(" ")}  -lm"
end


desc "build the fastscaling library"
file SO_FILE => OBJECTS do |t|
  sh "#{CC}  --shared -o #{t.name} #{t.prerequisites.join(' ')}"
end

desc "run with valgrind"
task :valgrind => TEST_PROGRAM do
  sh "LD_LIBRARY_PATH=. valgrind --leak-check=full --show-leak-kinds=all ./#{TEST_PROGRAM}"
end

desc "build the test program"
file TEST_PROGRAM => ["test.o", SO_FILE] do |t|
  sh "#{CXX} -Werror #{t.prerequisites.join(" ")}  -o #{t.name}"
end

task :test => "test_program" do
  sh "./#{TEST_PROGRAM}"
end

desc "runs each test case sequentially in a separate process"
task :test_each_case_in_separate_process => "test_program" do
  test_name_lines = `./#{TEST_PROGRAM} --list-test-names-only`
  test_names = test_name_lines.split("\n")
  test_names.each do |test_name|
    sh "./#{TEST_PROGRAM} '#{test_name}'"
  end
end

