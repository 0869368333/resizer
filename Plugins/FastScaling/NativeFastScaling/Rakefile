require_relative 'c_build_rake'

task "malloc.h" do end
  
task :default => "fastscaling"


%w{ test_program fastscaling libfastscaling.so }.each { |file| CLOBBER.include(file) if File.exists?(file) }


OBJECTS=%w{ bitmap_compositing.o bitmap_formats.o lookup_tables.o color_matrix.o weighting.o unmanaged_renderer.o convolution.o }
SO_FILE="libfastscaling.so"


TEST_PROGRAM = "test_program"


desc "build a fastscaling program"
file "fastscaling" => ['fastscaling.o', SO_FILE]  do |t|
  sh "#{CC} -o #{t.name} -Werror #{t.prerequisites.join(" ")}  -lm"
end


desc "build the fastscaling library"
file SO_FILE => OBJECTS do |t|
  sh "#{CC}  --shared -o #{t.name} #{t.prerequisites.join(' ')}"
end

def with_ld_library_path(ld_library_path, &block)
  was = ENV['LD_LIBRARY_PATH']
  begin
    ENV['LD_LIBRARY_PATH'] = ld_library_path
    block.call
  ensure
    ENV['LD_LIBRARY_PATH'] = was
  end
end

desc "run with valgrind"
task :valgrind => TEST_PROGRAM do
  with_ld_library_path('.') do 
    sh "valgrind --leak-check=full --show-leak-kinds=all ./#{TEST_PROGRAM}"
  end
end

desc "run with cachegrind"
task :cachegrind => TEST_PROGRAM do |t|
  cachegrind_out_file = "/tmp/cachegrind-out-file"
  with_ld_library_path('.') do
    sh "valgrind --tool=cachegrind --branch-sim=yes --cachegrind-out-file=#{cachegrind_out_file} ./#{t.prerequisites.first}"
  end
  sh "cg_annotate #{cachegrind_out_file}"
end

desc "run with callgrind"
task :callgrind => TEST_PROGRAM do |t|
  with_ld_library_path('.') do
    sh "valgrind --tool=callgrind --dump-instr=yes --cache-sim=yes --branch-sim=yes ./#{t.prerequisites.first}"
  end
end
  

desc "build the test program"
file TEST_PROGRAM => ["test.o", "test_helpers.o", "weighting_test_helpers.o"] + OBJECTS do |t|
  sh "#{CXX} -Werror #{t.prerequisites.join(" ")}  -o #{t.name}"
end

task :test => "test_program" do
  with_ld_library_path('.') do 
    sh "./#{TEST_PROGRAM}"
  end
end

desc "runs each test case sequentially in a separate process"
task :test_each_case_in_separate_process => "test_program" do
  #use shared library in current directory
  ENV['LD_LIBRARY_PATH'] = "."

  test_name_lines = `./#{TEST_PROGRAM} --list-test-names-only`
  test_names = test_name_lines.split("\n")
  test_names.each do |test_name|
    sh "./#{TEST_PROGRAM} '#{test_name}'"
  end
end

